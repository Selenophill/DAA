#include <iostream> 
#include <vector> 
#include <algorithm> 
using namespace std; 
// Structure to represent an item 
struct Item { 
int weight; int 
value; 
}; 
// Function to solve discrete knapsack using greedy approach 
int discreteKnapsack(vector<Item>& items, int capacity) { 
// Sort items based on their value per unit weight 
sort(items.begin(), items.end(), [](const Item& a, const Item& b) { 
return (double)a.value / a.weight > (double)b.value / b.weight; 
}); 
int totalValue = 0; 
int currentWeight = 0; 
// Fill the knapsack with items for 
(const Item& item : items) { 
if (currentWeight + item.weight <= capacity) { 
currentWeight += item.weight; 
totalValue += item.value; 
} 
} 
return totalValue; 
} 
// Function to solve continuous knapsack using greedy approach 
double continuousKnapsack(vector<Item>& items, int capacity) { 
// Sort items based on their value per unit weight sort(items.begin(), 
items.end(), [](const Item& a, const Item& b) { 
return (double)a.value / a.weight > (double)b.value / b.weight; 
}); 
double totalValue = 0.0; int 
currentWeight = 0; 
// Fill the knapsack with items fractionally for 
(const Item& item : items) { 
Dept. of CSE, ATMECE, MYSURU 
32 
DAA LAB 
BCSL404 
if (currentWeight + item.weight <= capacity) { 
currentWeight += item.weight; 
totalValue += item.value; 
} else { 
int remainingCapacity = capacity - currentWeight; 
totalValue += (double)item.value / item.weight * remainingCapacity; 
break; 
} } 
return totalValue; 
} 
int main() { vector<Item> 
items; int n, capacity; 
// Input number of items and capacity of knapsack 
cout << "Enter the number of items: "; 
cin >> n; 
cout << "Enter the capacity of knapsack: "; cin 
>> capacity; 
// Input the weight and value of each item 
cout << "Enter the weight and value of each item:" << endl; for 
(int i = 0; i < n; i++) { 
Item item; 
cout << "Item " << i + 1 << ": "; cin 
>> item.weight >> item.value; 
items.push_back(item); 
} 
// Solve discrete knapsack problem 
int discreteResult = discreteKnapsack(items, capacity); 
cout << "Maximum value for discrete knapsack: " << discreteResult << endl; 
// Solve continuous knapsack problem 
double continuousResult = continuousKnapsack(items, capacity); 
cout << "Maximum value for continuous knapsack: " << continuousResult << endl; return 
0; 
}
